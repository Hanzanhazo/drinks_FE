name: Docker
on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
          with:
           node-version: 18
           cache: 'npm'
        run: npm ci
        run: npm test

      # # 도커 이미지에 env 파일 포함
      # - name: Create .env file
      #   run: |
      #     echo "REACT_APP_URL_NAME=${{ secrets.REACT_APP_URL_NAME }}" >> .env

      # 도커 메타
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/hanzanhazo-deploy
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}

      # 도커 빌드 관련 셋업
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 내 도커허브 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 도커이미지 빌드하고 허브로 푸쉬
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      # 도커이미지 EC2 에서 pull 그리고 컨테이너 실행
      - name: Deploy to OCI
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/hanzanhazo-deploy:main
            docker stop web || true
            docker rm web || true
            docker run -d --name web -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/hanzanhazo-deploy:main

 #12